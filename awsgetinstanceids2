#!/bin/bash

# awsgetinstanceids2
# author: jhepworth
# date: Thu Apr 12 21:07:03 UTC 2018
#
# This script returns a json string detailing the instances given a state argument
#
# Arguments
# -a "all" (default)
# -r "running"
# -s "stopped"
# -f friendlyprint (prints instance ids only)

# enforce one arg minimum
[[ ${#} -eq 0 ]] && { echo "Please supply an argument: -a, -r, -s" >&2; exit 1; }

declare state=""
while getopts ":arsf" opt; do
	case $opt in
		a)
			state="ALL"
			;;
		r)
			state="running"
			;;
		s)
			state="stopped"
			;;
		f)
			friendlyprint="true"
			;;
		\?)
			echo "Invalid argument: -${OPTARG}" >&2
			exit 1
			;;
	esac
done

# check dependancies on awscli and jq
hasawscli=$(type aws)
[[ ${#hasawscli} -eq 0 ]] && { echo "Aws command line application is not installed... try sudo apt-get install awscli" >&2; exit 1; }
hasjq=$(type jq)
[[ ${#hasjq} -eq 0 ]] && { echo "JQ is not installed...try sudo apt-get install jq" >&2; exit 1; }

# check that aws is configured
awsconfigfile="${HOME}/.aws/config"
[[ ! -f ${awsconfigfile} ]] && { echo "AWS Config file does not exist...${awsconfigfile}" >&2; exit 1; }

# now query for the instance ids
if [[ ${state} == "ALL" ]]; then
	instance_json=$(aws ec2 describe-instances | jq ".Reservations[].Instances[]")
else
	instance_json=$(aws ec2 describe-instances | jq ".Reservations[].Instances[] | select(.State.Name | contains(\"${state}\"))" )
fi

if [[ ${friendlyprint} == "true" ]]; then
	echo $instance_json | jq ".InstanceId" -r
else
	echo $instance_json
fi

exit 0
